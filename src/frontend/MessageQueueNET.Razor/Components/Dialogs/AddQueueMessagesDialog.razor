@inject DashboardService DashboardService
@inject IDialogService DialogService

@inherits BaseComponent

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.AddToQueue" Class="mr-3" />Add Messages: @QueueName
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField T="string" Style="width:800px;max-width:100%"
                      Label="Messages" 
                      Variant="Variant.Text" 
                      @bind-Value="_messagesText"
                      Required="true"
                      Lines="15" />
        <MudCheckBox Label="One message per line"
                     @bind-Checked="_oneMessagePerLine" />
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Secondary"
                   OnClick="() => MudDialog?.Close()"
                   Class="px-10">Close</MudButton>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   OnClick="Submit"
                   Class="px-10">Add</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public string QueueName { get; set; } = "";
    [CascadingParameter] public MudDialogInstance? MudDialog { get; set; }

    private string _messagesText = "";
    private bool _oneMessagePerLine = false;

    async private Task Submit()
    {
        if(String.IsNullOrWhiteSpace(_messagesText))
        {
            return;
        }

        var messages = _oneMessagePerLine
            ? _messagesText.Split('\n').Select(l => l.Trim()).Where(l => !string.IsNullOrEmpty(l))
            : new string[] { _messagesText.Trim() };

        if (await DashboardService.AddMessages(QueueName, messages))
        {
            MudDialog?.Close();
        }
    }
}