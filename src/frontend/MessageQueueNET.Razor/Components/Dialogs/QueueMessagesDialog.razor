@using MessageQueueNET.Client.Models;
@inject DashboardService DashboardService

@if(_messages != null)
{
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.More" Class="mr-3" />Messages: @QueueName
            </MudText>
        </TitleContent>
        <DialogContent>
            @if (_messages.Messages is not null)
            {
                <MudDataGrid Items="_messages.Messages?.FitsSearchString(_searchString.Trim())">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Messages</MudText>
                        <MudSpacer />
                        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" />
                    </ToolBarContent>
                    <Columns>
                        <PropertyColumn Property="x => x.Id" Title="Id" Sortable="false" />
                        <PropertyColumn Property="x=> x.CreationDateUTC.ToLocalTime()" Title="Created" Sortable="false" />
                        <PropertyColumn Property="x => x.Value" Title="Message" Sortable="false" />
                    </Columns>
                </MudDataGrid>
            }
        </DialogContent>
    </MudDialog>
}

@code {
    [Parameter] public string QueueName { get; set; } = "";

    private MessagesResult? _messages = null;
    private string _searchString = "";

    async protected override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _messages = await DashboardService.GetAllQueueMessages(QueueName);
    }
}