@using MessageQueueNET.Client.Models;
@inject DashboardService DashboardService

@inherits BaseComponent

@if (_messages is not null)
{
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.More" Class="mr-3" />Messages: @QueueName
            </MudText>
        </TitleContent>
        <DialogContent>
            <MudContainer Style="width:100%;max-heigth:80%;overflow-y: scroll">
                <MudDataGrid Items="_messages.FitsSearchString(_searchString.Trim())">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Messages</MudText>
                        <MudSpacer />
                        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" />
                    </ToolBarContent>
                    <Columns>
                        @if (Unconfirmed == false)
                        {
                            <TemplateColumn>
                                <CellTemplate>
                                    <MudIconButton Size="@Size.Medium"
                                                   Icon="@Icons.Material.Outlined.Delete"
                                                   Color="Color.Secondary"
                                                   OnClick="() => DeleteMessage(context.Item)"/>
                                </CellTemplate>
                            </TemplateColumn>
                        }
                        <PropertyColumn Property="x => x.Id" Title="Id" Sortable="false" />
                        <PropertyColumn Property="x=> x.CreationDateUTC.ToLocalTime()" Title="Created" Sortable="false" />
                        @if (_messages.Any(m => m.DequeuingClientId != null))
                        {
                            <PropertyColumn Property="x => x.DequeuingClientId ?? String.Empty" Title="Deq.ClientId" Sortable="true" />
                        }
                        <PropertyColumn Property="x => x.Value" Title="Message" Sortable="false" />
                    </Columns>
                </MudDataGrid>
            </MudContainer>
        </DialogContent>
    </MudDialog>
}

@code {
    [Parameter] public string QueueName { get; set; } = "";
    [Parameter] public bool Unconfirmed { get; set; } = false;

    private string _searchString = "";

    private IEnumerable<MessageResult>? _messages = null;

    async protected override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await LoadMessages();
    }

    async private Task LoadMessages()
    {
        var messagesResult = await DashboardService.GetAllQueueMessages(QueueName, Unconfirmed);

        _messages = Unconfirmed
            ? messagesResult.UnconfirmedMessages
            : messagesResult.Messages;
    }

    async private Task DeleteMessage(MessageResult messageResult)
    {
        if(await DashboardService.DeleteMessage(QueueName, messageResult.Id))
        {
            await LoadMessages();
        }
    }
}