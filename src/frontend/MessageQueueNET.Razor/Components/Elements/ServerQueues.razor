@using MessageQueueNET.Client.Models;
@implements IDisposable
@inherits BaseComponent

@inject DashboardService DashboardService
@inject QueryQueueEventBus QueryEvents
@inject IDialogService DialogService

@if (_queueLengthResults.TryGetValue(DashboardService.SelectedServerName, out IEnumerable<QueueInfoModel>? queueInfoModels))
{
    <MudDataGrid Items="queueInfoModels.FitsSearchString(_searchString.Trim())" Style="white-space:nowrap">
        <ToolBarContent>
            <MudText Typo="Typo.h6">
               Queues
                @if(DashboardService.CanCreateQueue()) {
                    <MudIconButton Size="@Size.Medium"
                                   Icon="@Icons.Material.Outlined.AddCircleOutline"
                                   Color="Color.Primary"
                                   OnClick="async () => await CreateQueue()" />
                }
                @if(DashboardService.CanDeleteMany()) 
                {
                    <MudIconButton Size="@Size.Medium"
                                   Icon="@Icons.Material.Outlined.Delete"
                                   Color="Color.Secondary"
                                   OnClick="async () => await DeleteQueue(DashboardService.DeleteManyQueuePattern())" />
                }
            </MudText>

            @if (queueInfoModels.Any())
            {
                <MudText Typo="Typo.body2">
                    Last Access: @queueInfoModels.Max(q=>q.LastAccessUTC).ToLocalTime()
                </MudText>
            }
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" />
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.QueueName" Title="Queue" Sortable="true" />
            <PropertyColumn Property="x => x.LastModifiedUTC.ToLocalTime()" Title="Last Modified" Sortable="true" />

            <TemplateColumn Title="Suspend" Sortable="false">
                <HeaderTemplate>
                    <MudText Typo="Typo.body2">
                        Suspend
                        @if(!string.IsNullOrEmpty(DashboardService.SelectedServerFilter)) 
                        {
                            <MudIconButton Size="@Size.Medium" Color="Color.Primary"
                                           OnClick="async () => await EditQueuesSuspend()"
                                           Icon="@Icons.Material.Outlined.Edit" />
                        }
                    </MudText>
                </HeaderTemplate>
                <CellTemplate>
                    <MudIconButton Size="@Size.Medium"
                                   Color="context.Item.SuspendEnqueue ? Color.Error : Color.Primary"
                                   OnClick="async () => await EditQueueProperties(context.Item.QueueName)"
                                   Icon="@Icons.Material.Outlined.ArrowCircleUp" />
                    <MudIconButton Size="@Size.Medium"
                                   Color="context.Item.SuspendDequeue ? Color.Error : Color.Primary"
                                   OnClick="async () => await EditQueueProperties(context.Item.QueueName)"
                                   Icon="@Icons.Material.Outlined.ArrowCircleDown" />
                </CellTemplate>
            </TemplateColumn>

            <TemplateColumn Title="Items" Sortable="true">
                <CellTemplate>
                    <MudChip Color="Color.Secondary"
                             OnClick="async () => await ShowQueueMessages(context.Item.QueueName)"
                             Variant="Variant.Filled">@context.Item.QueueLength</MudChip>
                </CellTemplate>
            </TemplateColumn>

            <TemplateColumn Title="Unconfirmed Items" Sortable="true">
                <CellTemplate>
                    @if (context.Item.UnconfirmedItems.HasValue) {
                        <MudChip Color="Color.Success"
                                 OnClick="async () => await ShowQueueMessages(context.Item.QueueName, true)"
                                 Disabled="context.Item.UnconfirmedItems == 0"
                                 Variant="Variant.Filled">
                            @(context.Item.MaxUnconfirmedItems.HasValue && context.Item.MaxUnconfirmedItems.Value>0
                                ? $"{context.Item.UnconfirmedItems}/{context.Item.MaxUnconfirmedItems.Value}"
                                : $"{context.Item.UnconfirmedItems}")
                             </MudChip>
                    }
                </CellTemplate>
            </TemplateColumn>

            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudIconButton Size="@Size.Medium"
                                   Icon="@Icons.Material.Outlined.Delete"
                                   Color="Color.Secondary"
                                   OnClick="async () => await DeleteQueue(context.Item.QueueName)" />
                    <MudIconButton Size="@Size.Medium"
                                   Icon="@Icons.Material.Outlined.AddToQueue"
                                   Color="Color.Primary"
                                   OnClick="async () => await AddMessages(context.Item.QueueName)" />
                    <MudIconButton Size="@Size.Medium"
                                   Icon="@Icons.Material.Outlined.Settings" 
                                   Color="Color.Primary"
                                   OnClick="async () => await EditQueueProperties(context.Item.QueueName)" />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
}

@code{
    private string _searchString = "";
    private ConcurrentDictionary<string, IEnumerable<QueueInfoModel>> _queueLengthResults = new ConcurrentDictionary<string, IEnumerable<QueueInfoModel>>();

    async protected override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        // initalise with already queried
        foreach (var serverName in QueryEvents.QueuePropertiesResult.Keys)
        {
            await QueuePropertiesReceived(serverName, QueryEvents.QueuePropertiesResult[serverName]);
        }

        QueryEvents.OnQueuePropertiesResultAsync += QueuePropertiesReceived;
        DashboardService.EventBus.OnQueueServerChangedAsync += QueueServerChanged;
    }

    #region EventBus Handlers

    private async Task QueuePropertiesReceived(string serverName, QueuePropertiesResult result) 
        => await InvokeAsync(() =>  // invoke async, event not triggerd from the UI Thread
        {
            _queueLengthResults[serverName] = result.ToQueueInfoModels();

            if (serverName == DashboardService.SelectedServerName)
            {
                StateHasChanged();
            }
        });

    private Task QueueServerChanged()
    {
        StateHasChanged();

        return Task.CompletedTask;
    }

    #endregion

    async private Task EditQueueProperties(string queueName)
    {
        await DialogService.ShowAsync<QueuePropertiesDialog>(queueName,
            new DialogParameters()
            {
                { "QueueName", queueName }
            },
            new DialogOptions
            {
                MaxWidth = MaxWidth.ExtraExtraLarge,
                CloseButton = true,
                CloseOnEscapeKey = true
            });
    }

    async private Task EditQueuesSuspend()
    {
        await DialogService.ShowAsync<QueuesSuspendDialog>("",
            new DialogParameters()
            {
                { "QueueFilter", DashboardService.SelectedServerFilter }
            },
            new DialogOptions
                {
                    MaxWidth = MaxWidth.ExtraExtraLarge,
                    CloseButton = true,
                    CloseOnEscapeKey = true
                });
    }

    async private Task CreateQueue()
    {
        await DialogService.ShowAsync<CreateQueueDialog>("",
            new DialogOptions
            {
                MaxWidth = MaxWidth.ExtraExtraLarge,
                CloseButton = true,
                CloseOnEscapeKey = true
            });
    }

    async private Task DeleteQueue(string queueName)
    {
        await DialogService.ShowAsync<DeleteQueueDialog>(queueName,
            new DialogParameters()
            {
                { "QueueName", queueName }
            },
            new DialogOptions
            {
                MaxWidth = MaxWidth.ExtraExtraLarge,
                CloseButton = true,
                CloseOnEscapeKey = true
            });
    }

    async private Task AddMessages(string queueName)
    {
        await DialogService.ShowAsync<AddQueueMessagesDialog>(queueName,
            new DialogParameters()
            {
                { "QueueName", queueName }
            },
            new DialogOptions
            {
                MaxWidth = MaxWidth.ExtraExtraLarge,
                CloseButton = true,
                CloseOnEscapeKey = true
            });
    }

    async private Task ShowQueueMessages(string queueName, bool unconfirmed = false)
    {
        await DialogService.ShowAsync<QueueMessagesDialog>("",
            new DialogParameters()
            {
                { "QueueName", queueName },
                { "Unconfirmed", unconfirmed }
            },
            new DialogOptions()
            {
                MaxWidth = MaxWidth.ExtraExtraLarge,
                //FullScreen = true,
                CloseButton = true,
                CloseOnEscapeKey = true
            });
    }

    public void Dispose()
    {
        QueryEvents.OnQueuePropertiesResultAsync -= QueuePropertiesReceived;
        DashboardService.EventBus.OnQueueServerChangedAsync -= QueueServerChanged;
    }
}