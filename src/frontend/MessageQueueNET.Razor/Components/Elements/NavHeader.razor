@using MessageQueueNET.Client.Models;
@implements IDisposable
@inherits BaseComponent
@inject DashboardService DashboardService
@inject QueryQueueEventBus QueryEvents

<MudButtonGroup OverrideStyles="false">
    @foreach (var queueServerName in DashboardService.QueueServersNames)
    {
        bool isSelected = DashboardService.SelectedServerName == queueServerName;

        <MudButton Color="isSelected ? Color.Primary : Color.Secondary"
                   Variant="isSelected ? Variant.Filled : Variant.Outlined"
                   OnClick="async () => await SetQueueServer(queueServerName)">
                   @queueServerName
            @if (_itemCounters.ContainsKey(queueServerName))
            {
                <MudChip Color="Color.Secondary" 
                         Variant="Variant.Filled">@_itemCounters[queueServerName]</MudChip>
            }
            @if (_unconfirmedCounters.ContainsKey(queueServerName))
            {
                <MudChip Color="Color.Success" 
                         Variant="Variant.Filled">@_unconfirmedCounters[queueServerName]</MudChip>
            }
        </MudButton>
    }
</MudButtonGroup>

@code {
    private ConcurrentDictionary<string, int> _itemCounters = new();
    private ConcurrentDictionary<string, int> _unconfirmedCounters = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        QueryEvents.OnQueuePropertiesResultAsync += QueueLengthReceived;
    }

    async private Task SetQueueServer(string queueServerName)
    {
        await DashboardService.SetSelectedServerName(queueServerName);
    }

    #region EventBus Handlers

    private async Task QueueLengthReceived(string serverName, QueuePropertiesResult result)
        => await InvokeAsync(() =>  // invoke async, event not triggerd from the UI Thread
        {

            int itemCount = result.Queues?
                                        .Select(q => q.Value.Length)
                                        .Sum() ?? 0;
            int unconfimedCount = result.Queues?
                                        .Select(q => q.Value.UnconfirmedItems)
                                        .Sum() ?? 0;

            if (itemCount > 0)
            {
                _itemCounters[serverName] = itemCount;
            } 
            else
            {
                _itemCounters.TryRemove(serverName, out _);    
            }

            if (unconfimedCount > 0)
            {
                _unconfirmedCounters[serverName] = unconfimedCount;
            }
            else
            {
                _unconfirmedCounters.TryRemove(serverName, out _);
            }

            StateHasChanged();
        });

    #endregion

    public void Dispose()
    {
        QueryEvents.OnQueuePropertiesResultAsync -= QueueLengthReceived;
    }
}